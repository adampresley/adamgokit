package main

import (
	"embed"
	"log/slog"
	"net/http"

	"github.com/adampresley/adamgokit/httphelpers"
	"github.com/adampresley/adamgokit/mux"
	"github.com/adampresley/adamgokit/rendering"
	"{{.GithubRepo}}/cmd/{{.AppName}}/internal/configuration"
	"{{.GithubRepo}}/cmd/{{.AppName}}/internal/home"
	{{- if .HasDB}}
	"gorm.io/gorm"
	{{end}}
)

var (
	Version     string = "development"
	appName     string = "{{.AppName}}"

	//go:embed app
	appFS embed.FS

	/* Services */
	renderer rendering.TemplateRenderer

	/* Controllers */
	homeController home.HomeControllerInterface
)

func main() {
	config := configuration.LoadConfig()
	setupLogger(&config, Version)

	slog.Info("configuration loaded",
		slog.String("app", appName),
		slog.String("version", Version),
		slog.String("loglevel", config.LogLevel),
		slog.String("host", config.Host),
	)

	slog.Debug("setting up...")

	/*
	 * Setup services
	 */
	renderer = rendering.NewGoTemplateRenderer(rendering.GoTemplateRendererConfig{
		TemplateDir:       "app",
		TemplateExtension: ".html",
		TemplateFS:        appFS,
		LayoutsDir:        "layouts",
	})

	/*
	 * Setup controllers
	 */
	homeController = home.NewHomeController(home.HomeControllerConfig{
		Config:   &config,
		Renderer: renderer,
	})

	/*
	 * Setup router and http server
	 */
	slog.Debug("setting up routes...")

	routes := []mux.Route{
		{Path: "GET /heartbeat", Handler: http.HandlerFunc(heartbeat)},
		{Path: "GET /", Handler: http.HandlerFunc(homeController.HomePage)},
		{Path: "GET /about", Handler: http.HandlerFunc(homeController.AboutPage)},
	}

	routerConfig := mux.RouterConfig{
		Address:              config.Host,
		Debug:                Version == "development",
		ServeStaticContent:   true,
		StaticContentRootDir: "app",
		StaticContentPrefix:  "/static/",
		StaticFS:             appFS,
	}

	m := mux.SetupRouter(routerConfig, routes)
	httpServer, quit := mux.SetupServer(routerConfig, m)

	/*
	 * Wait for graceful shutdown
	 */
	slog.Info("server started")

	<-quit
	mux.Shutdown(httpServer)
	slog.Info("server stopped")
}

func heartbeat(w http.ResponseWriter, r *http.Request) {
	httphelpers.TextOK(w, "OK")
}
